/*
 * Copyright (C) 2018 Turtle Creek Valley
Council of Governments, PA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.tcvcog.tcvce.entities;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.time.ZoneId;

/**
 *
 * @author Eric C. Darsow
 */
public class Event extends EntityUtils implements Serializable {
    
    private int eventID;
    private EventCategory category;
    
    private LocalDateTime dateOfRecord;
    private String dateOfRecordPretty;
    private java.util.Date dateOfRecordUtilDate;
    private LocalDateTime timestamp;
    private String timestampPretty;
    
    private String description;
    private User owner;
    private boolean discloseToMunicipality; 
    private boolean discloseToPublic;
    private boolean active;
    private boolean hidden;
    private String notes;
    
    /*Case event requests fields */
    
    // utility memvar which is true if there's a requested
    // event category in requestedEventCategory
    private boolean requestsAction;
    
    // computed based on the business logic for
    // action request responses - set by EventCoordinator
    private boolean requestClosed;
    
    // OPTIONAL: a pointer to the event whose action request
    // parameters created this event
    // NULL for events that were not generated by an action request
    private Event triggeringEvent;
    
    private boolean currentUserCanTakeAction;
    
    private EventCategory requestedEventCategory;
    
// the event object generated based on this event's
    // action request. NOTE: triggeringEvent and responseEvent
    // will never BOTH have object values
    private Event responseEvent;
    
    private User actionRequestedBy;
    
    private boolean directRequestToDefaultMuniCEO;
    private User responderIntended;
    private User responderActual;
    
    private LocalDateTime responseTimestamp;
    private String responseTimePrettyDate;
    
    private String responderNotes;
    private boolean requestRejected;

    /**
     * @return the eventID
     */
    public int getEventID() {
        return eventID;
    }

    /**
     * @return the category
     */
    public EventCategory getCategory() {
        return category;
    }

    /**
     * @return the dateOfRecord
     */
    public LocalDateTime getDateOfRecord() {
        return dateOfRecord;
    }

    /**
     * @return the dateOfRecordPretty
     */
    public String getDateOfRecordPretty() {
        String pretty = getPrettyDate(dateOfRecord);
        dateOfRecordPretty = pretty;
        return dateOfRecordPretty;
    }

    /**
     * @return the timestamp
     */
    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    /**
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * @return the owner
     */
    public User getOwner() {
        return owner;
    }

    /**
     * @return the discloseToMunicipality
     */
    public boolean isDiscloseToMunicipality() {
        return discloseToMunicipality;
    }

    /**
     * @return the discloseToPublic
     */
    public boolean isDiscloseToPublic() {
        return discloseToPublic;
    }

    /**
     * @return the active
     */
    public boolean isActive() {
        return active;
    }

    /**
     * @return the hidden
     */
    public boolean isHidden() {
        return hidden;
    }

    /**
     * @return the notes
     */
    public String getNotes() {
        return notes;
    }

    /**
     * @param eventID the eventID to set
     */
    public void setEventID(int eventID) {
        this.eventID = eventID;
    }

    /**
     * @param category the category to set
     */
    public void setCategory(EventCategory category) {
        this.category = category;
    }

    /**
     * @param dateOfRecord the dateOfRecord to set
     */
    public void setDateOfRecord(LocalDateTime dateOfRecord) {
        this.dateOfRecord = dateOfRecord;
    }

    
    /**
     * @param timestamp the timestamp to set
     */
    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * @param owner the owner to set
     */
    public void setOwner(User owner) {
        this.owner = owner;
    }

    /**
     * @param discloseToMunicipality the discloseToMunicipality to set
     */
    public void setDiscloseToMunicipality(boolean discloseToMunicipality) {
        this.discloseToMunicipality = discloseToMunicipality;
    }

    /**
     * @param discloseToPublic the discloseToPublic to set
     */
    public void setDiscloseToPublic(boolean discloseToPublic) {
        this.discloseToPublic = discloseToPublic;
    }

    /**
     * @param active the active to set
     */
    public void setActive(boolean active) {
        this.active = active;
    }

    /**
     * @param hidden the hidden to set
     */
    public void setHidden(boolean hidden) {
        this.hidden = hidden;
    }

    /**
     * @param notes the notes to set
     */
    public void setNotes(String notes) {
        this.notes = notes;
    }

   

    /**
     * @return the responderActual
     */
    public User getResponderActual() {
        return responderActual;
    }

    /**
     * @return the responseTimestamp
     */
    public LocalDateTime getResponseTimestamp() {
        return responseTimestamp;
    }

    

    /**
     * @param responderActual the responderActual to set
     */
    public void setResponderActual(User responderActual) {
        this.responderActual = responderActual;
    }

    /**
     * @param responseTimestamp the responseTimestamp to set
     */
    public void setResponseTimestamp(LocalDateTime responseTimestamp) {
        this.responseTimestamp = responseTimestamp;
    }


    /**
     * @return the dateOfRecordUtilDate
     */
    public java.util.Date getDateOfRecordUtilDate() {
        if(dateOfRecord != null){
            dateOfRecordUtilDate = java.util.Date.from(
                    this.dateOfRecord.atZone(ZoneId.systemDefault()).toInstant());
        }
        return dateOfRecordUtilDate;
    }

    /**
     * @param dateOfRecordUtilDate the dateOfRecordUtilDate to set
     */
    public void setDateOfRecordUtilDate(java.util.Date dateOfRecordUtilDate) {
        this.dateOfRecordUtilDate = dateOfRecordUtilDate;
        if(dateOfRecordUtilDate != null){
            dateOfRecord = this.dateOfRecordUtilDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
        }
    }

   

    /**
     * @return the responderNotes
     */
    public String getResponderNotes() {
        return responderNotes;
    }

    /**
     * @param responderNotes the responderNotes to set
     */
    public void setResponderNotes(String responderNotes) {
        this.responderNotes = responderNotes;
    }

    /**
     * @return the responseTimePrettyDate
     */
    public String getResponseTimePrettyDate() {
        String pretty = getPrettyDate(responseTimestamp);
        responseTimePrettyDate = pretty;
        return responseTimePrettyDate;
    }

    /**
     * @param responseTimePrettyDate the responseTimePrettyDate to set
     */
    public void setResponseTimePrettyDate(String responseTimePrettyDate) {
        this.responseTimePrettyDate = responseTimePrettyDate;
    }

    /**
     * @return the timestampPretty
     */
    public String getTimestampPretty() {
        String s = getPrettyDate(timestamp);
        timestampPretty = s;
        return timestampPretty;
    }

    /**
     * @param timestampPretty the timestampPretty to set
     */
    public void setTimestampPretty(String timestampPretty) {
        this.timestampPretty = timestampPretty;
    }

    /**
     * @return the currentUserCanTakeAction
     */
    public boolean isCurrentUserCanTakeAction() {
        return currentUserCanTakeAction;
    }

    /**
     * @param currentUserCanTakeAction the currentUserCanTakeAction to set
     */
    public void setCurrentUserCanTakeAction(boolean currentUserCanTakeAction) {
        this.currentUserCanTakeAction = currentUserCanTakeAction;
    }

    /**
     * @return the actionRequestedBy
     */
    public User getActionRequestedBy() {
        return actionRequestedBy;
    }

    /**
     * @param actionRequestedBy the actionRequestedBy to set
     */
    public void setActionRequestedBy(User actionRequestedBy) {
        this.actionRequestedBy = actionRequestedBy;
    }

    /**
     * @return the responderIntended
     */
    public User getResponderIntended() {
        return responderIntended;
    }

    /**
     * @param responderIntended the responderIntended to set
     */
    public void setResponderIntended(User responderIntended) {
        this.responderIntended = responderIntended;
    }

    /**
     * @return the requestRejected
     */
    public boolean isRequestRejected() {
        return requestRejected;
    }

    /**
     * @param requestRejected the requestRejected to set
     */
    public void setRequestRejected(boolean requestRejected) {
        this.requestRejected = requestRejected;
    }

    /**
     * @return the requestedEventCategory
     */
    public EventCategory getRequestedEventCategory() {
        return requestedEventCategory;
    }

    /**
     * @param requestedEventCategory the requestedEventCategory to set
     */
    public void setRequestedEventCategory(EventCategory requestedEventCategory) {
        this.requestedEventCategory = requestedEventCategory;
    }

    /**
     * @return the triggeringEvent
     */
    public Event getTriggeringEvent() {
        return triggeringEvent;
    }

    /**
     * @param triggeringEvent the triggeringEvent to set
     */
    public void setTriggeringEvent(Event triggeringEvent) {
        this.triggeringEvent = triggeringEvent;
    }


    /**
     * @return the requestsAction
     */
    public boolean isRequestsAction() {
        requestsAction = requestedEventCategory!= null;
        return requestsAction;
    }

    /**
     * @param requestsAction the requestsAction to set
     */
    public void setRequestsAction(boolean requestsAction) {
        this.requestsAction = requestsAction;
    }

    /**
     * @return the requestClosed
     */
    public boolean isRequestClosed() {
        
        return requestClosed;
    }

    /**
     * @param requestClosed the requestClosed to set
     */
    public void setRequestClosed(boolean requestClosed) {
        this.requestClosed = requestClosed;
    }

    

    /**
     * @return the directRequestToDefaultMuniCEO
     */
    public boolean isDirectRequestToDefaultMuniCEO() {
        return directRequestToDefaultMuniCEO;
    }

    /**
     * @param directRequestToDefaultMuniCEO the directRequestToDefaultMuniCEO to set
     */
    public void setDirectRequestToDefaultMuniCEO(boolean directRequestToDefaultMuniCEO) {
        this.directRequestToDefaultMuniCEO = directRequestToDefaultMuniCEO;
    }

    /**
     * @return the responseEvent
     */
    public Event getResponseEvent() {
        return responseEvent;
    }

    /**
     * @param responseEvent the responseEvent to set
     */
    public void setResponseEvent(Event responseEvent) {
        this.responseEvent = responseEvent;
    }

   
  

    
}
